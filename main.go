package main

import (
	"fmt"
	"gopkg.in/telebot.v3"
	"log"
	"net/url"
	"os"
	"tgbot-url-keeper/storage"
)

const (
	StateDefault = iota
	StateAwaitingLinkID
)

var userStates = make(map[int64]int) // userID -> state

func main() {
	if err := storage.Init(); err != nil {
		log.Fatalf("Failed to initialize storage: %v", err)
	}

	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
	}

	bot, err := telebot.NewBot(telebot.Settings{
		Token: token,
	})
	if err != nil {
		log.Fatal(err)
	}

	menu := &telebot.ReplyMarkup{ResizeKeyboard: true}
	btnStart := menu.Text("üöÄ –°—Ç–∞—Ä—Ç")
	btnSave := menu.Text("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É")
	btnLinks := menu.Text("üìÇ –ú–æ–∏ —Å—Å—ã–ª–∫–∏")
	btnDelete := menu.Text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É")
	btnHelp := menu.Text("‚ùì –ü–æ–º–æ—â—å")

	menu.Reply(
		menu.Row(btnStart),
		menu.Row(btnSave),
		menu.Row(btnLinks),
		menu.Row(btnDelete),
		menu.Row(btnHelp),
	)

	bot.Handle("/start", func(c telebot.Context) error {
		return c.Send(
			`–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è, –∏ —è ‚Äî –±–æ–º–∂. 
–ù–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–π –±–æ–º–∂, –∞ *–±–æ–º–∂-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä*. 
–í–º–µ—Å—Ç–æ –±—É—Ç—ã–ª–æ–∫ —è —Å–æ–±–∏—Ä–∞—é —Å—Å—ã–ª–∫–∏! üéØ

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é –≤ —Å–≤–æ—é —Ç–µ–ª–µ–∂–∫—É. 
–ê –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! üòé`,
			menu,
		)
	})

	bot.Handle(&btnStart, func(c telebot.Context) error {
		return c.Send(
			`–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è, –∏ —è ‚Äî –±–æ–º–∂. 
–ù–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–π –±–æ–º–∂, –∞ *–±–æ–º–∂-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä*. 
–í–º–µ—Å—Ç–æ –±—É—Ç—ã–ª–æ–∫ —è —Å–æ–±–∏—Ä–∞—é —Å—Å—ã–ª–∫–∏! üéØ

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é –≤ —Å–≤–æ—é —Ç–µ–ª–µ–∂–∫—É. 
–ê –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ! üòé`,
			menu,
		)
	})

	bot.Handle(&btnSave, func(c telebot.Context) error {
		return c.Send("üì• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é –≤ —Å–≤–æ—é —Ç–µ–ª–µ–∂–∫—É!")
	})

	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		userID := c.Sender().ID
		text := c.Text()

		if userStates[userID] == StateAwaitingLinkID {
			linkID := text

			log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª linkID=%s –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", linkID)

			if err := storage.DeleteLink(userID, linkID); err != nil {
				return c.Send("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: " + err.Error())
			}

			userStates[userID] = StateDefault
			return c.Send("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–æ–µ–π —Ç–µ–ª–µ–∂–∫–∏. –¢–µ–ø–µ—Ä—å –µ—ë –Ω–µ—Ç –¥–∞–∂–µ –Ω–∞ —Å–≤–∞–ª–∫–µ! üóëÔ∏è")
		}

		if isValidURL(text) {
			if err := storage.SaveLink(userID, text); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: %v", err)
				return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
			}
			return c.Send("‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –º–æ—é —Ç–µ–ª–µ–∂–∫—É: " + text)
		}

		return c.Send("ü§î –•–º.. —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ, —Ç–∏–ø–∞ —Ö—Ç—Ç–ø –∏–ª–∏ —Å—Ö—Ç—Ç–ø.")
	})

	bot.Handle(&btnLinks, func(c telebot.Context) error {
		userID := c.Sender().ID

		links, err := storage.GetLinks(userID)
		if err != nil {
			return c.Send("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: " + err.Error())
		}

		if len(links) == 0 {
			return c.Send("üì≠ –¢–≤–æ—è —Ç–µ–ª–µ–∂–∫–∞ –ø—É—Å—Ç–∞. –ú–æ–∂–µ—Ç, –¥–æ–±–∞–≤–∏–º —Ç—É–¥–∞ –ø–∞—Ä–æ—á–∫—É —Å—Å—ã–ª–æ–∫? üòâ")
		}

		var message string
		for _, link := range links {
			message += fmt.Sprintf("üîó –°—Å—ã–ª–∫–∞ #%d: %s\n", link.ID, link.URL)
		}

		return c.Send("üìÇ *–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n" + message)
	})

	bot.Handle(&btnDelete, func(c telebot.Context) error {
		userID := c.Sender().ID
		userStates[userID] = StateAwaitingLinkID
		log.Printf("[DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ StateAwaitingLinkID –¥–ª—è userID=%d", userID)
		return c.Send("üî¢ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (ID) —Å—Å—ã–ª–∫–∏...")
	})

	bot.Handle(&btnHelp, func(c telebot.Context) error {
		return c.Send(`ü§ñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ–º–∂–∞:*
- –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é. –î–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç –±–æ—Ä—â–∞. üç≤
- –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üìÇ –ú–æ–∏ —Å—Å—ã–ª–∫–∏".
- –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É".
- –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–∂–∏–º–∞–π "‚ùì –ü–æ–º–æ—â—å". üòä`)
	})

	bot.Start()
}

func isValidURL(u string) bool {
	_, err := url.ParseRequestURI(u)
	return err == nil
}
