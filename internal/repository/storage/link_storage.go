package storage

import (
	"database/sql"
	"fmt"
	_ "github.com/mattn/go-sqlite3"
	"log"
	"strconv"
	"strings"
	"tgbot-url-keeper/internal/models"
)

var db *sql.DB

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func Init() error {
	var err error
	db, err = sql.Open("sqlite3", "./internal/repository/links.db")
	if err != nil {
		return fmt.Errorf("failed to open database: %v", err)
	}

	_, err = db.Exec(`
	CREATE TABLE IF NOT EXISTS links (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		user_id INTEGER NOT NULL,
		url TEXT NOT NULL,
		UNIQUE(user_id, url)
	)
`)
	if err != nil {
		return fmt.Errorf("failed to create table: %v", err)
	}

	return nil
}

func SaveLink(userID int64, url string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Å—ã–ª–∫–∞
	var exists bool
	err := db.QueryRow("SELECT EXISTS(SELECT 1 FROM links WHERE user_id = ? AND url = ?)", userID, url).Scan(&exists)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏: %v", err)
	}

	if exists {
		return fmt.Errorf("—Å—Å—ã–ª–∫–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
	}

	// –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç, –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
	_, err = db.Exec("INSERT INTO links (user_id, url) VALUES (?, ?)", userID, url)
	return err
}

// GetLinks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GetLinks(userID int64) ([]models.Link, error) {
	rows, err := db.Query("SELECT id, url FROM links WHERE user_id = ?", userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var links []models.Link
	for rows.Next() {
		var link models.Link
		if err := rows.Scan(&link.ID, &link.URL); err != nil {
			return nil, err
		}
		links = append(links, link)
	}

	return links, nil
}

func GetFormattedLinks(userID int64) (string, error) {
	links, err := GetLinks(userID)
	if err != nil {
		return "", err
	}

	if len(links) == 0 {
		return "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.", nil
	}

	var sb strings.Builder
	sb.WriteString("üìÇ *–¢–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:*\n")
	for i, link := range links {
		sb.WriteString(fmt.Sprintf("üîó –°—Å—ã–ª–∫–∞ #%d: %s\n", i+1, link.URL))
	}

	return sb.String(), nil
}

func DeleteLink(userID int64, linkID string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π linkID —á–∏—Å–ª–æ–º
	id, err := strconv.Atoi(linkID)
	if err != nil {
		// –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω URL
		id, err = GetLinkIDByURL(userID, linkID)
		if err != nil {
			log.Printf("[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: %s (userID=%d)", linkID, userID)
			return fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π ID —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		}
	}

	log.Printf("[DEBUG] –ó–∞–ø—Ä–æ—Å DELETE: id=%d, userID=%d", id, userID)
	result, err := db.Exec("DELETE FROM links WHERE id = ? AND user_id = ?", id, userID)
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: %v", err)
	}

	rowsAffected, _ := result.RowsAffected()
	log.Printf("[DEBUG] –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: %d", rowsAffected)

	if rowsAffected == 0 {
		log.Printf("[WARN] –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: id=%d, userID=%d", id, userID)
		return fmt.Errorf("—Å—Å—ã–ª–∫–∞ —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)
	}

	return nil
}

// GetLinkIDByURL –∏—â–µ—Ç ID —Å—Å—ã–ª–∫–∏ –ø–æ URL
func GetLinkIDByURL(userID int64, url string) (int, error) {
	normalizedURL := normalizeURL(url) // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É
	var id int
	err := db.QueryRow("SELECT id FROM links WHERE user_id = ? AND url = ?", userID, normalizedURL).Scan(&id)
	if err != nil {
		if err == sql.ErrNoRows {
			return 0, fmt.Errorf("—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		}
		return 0, err
	}
	return id, nil
}

// normalizeURL —É–±–∏—Ä–∞–µ—Ç http/https –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
func normalizeURL(url string) string {
	url = strings.TrimPrefix(url, "http://")
	url = strings.TrimPrefix(url, "https://")
	return url
}
